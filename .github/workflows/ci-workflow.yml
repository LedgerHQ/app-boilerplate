name: Compilation & tests

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
      - develop
  pull_request:

jobs:
  nano_build:
    name: Build boilerplate application for NanoS, X and S+
    strategy:
      matrix:
        include:
          - SDK: "$NANOS_SDK"
            model: nanos
          - SDK: "$NANOX_SDK"
            model: nanox
          - SDK: "$NANOSP_SDK"
            model: nanosp
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest
    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          make BOLOS_SDK=${{ matrix.SDK }}
          mv bin/app.elf "bin/Thibault_${{ matrix.model }}.elf"
      - name: Upload app binary
        uses: actions/upload-artifact@v3
        with:
          name: apps
          path: bin/*.elf

  job_scan_build:
    name: Clang Static Analyzer
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest
    steps:
      - name: Clone
        uses: actions/checkout@v3

      - name: Build with Clang Static Analyzer
        run: |
          make clean
          scan-build --use-cc=clang -analyze-headers -enable-checker security -enable-checker unix -enable-checker valist -o scan-build --status-bugs make default

      - name: Upload scan result
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: scan-build
          path: scan-build

  job_unit_test:
    name: Unit test
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Build unit tests
        run: |
          cd unit-tests/
          cmake -Bbuild -H. && make -C build && make -C build test
      - name: Generate code coverage
        run: |
          cd unit-tests/
          lcov --directory . -b "$(realpath build/)" --capture --initial -o coverage.base && \
          lcov --rc lcov_branch_coverage=1 --directory . -b "$(realpath build/)" --capture -o coverage.capture && \
          lcov --directory . -b "$(realpath build/)" --add-tracefile coverage.base --add-tracefile coverage.capture -o coverage.info && \
          lcov --directory . -b "$(realpath build/)" --remove coverage.info '*/unit-tests/*' -o coverage.info && \
          genhtml coverage.info -o coverage
      - uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: unit-tests/coverage
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./unit-tests/coverage.info
          flags: unittests
          name: codecov-app-boilerplate
          fail_ci_if_error: true
          verbose: true

  job_generate_doc:
    name: Generate project documentation
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-builder-lite:latest
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: HTML documentation
        run: doxygen .doxygen/Doxyfile
      - uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: doc/html

  job_functional_test:
    name: Functional tests with Ragger (compatible with Speculos & physical devices)
    needs:
      - nano_build
    strategy:
      matrix:
        include:
          - model: nanos
          - model: nanox
          - model: nanosp
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: Download app binary
        uses: actions/download-artifact@v3
        with:
          name: apps
          path: tests/elfs
      - name: Install tests dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-user-static tesseract-ocr libtesseract-dev
          pip install --extra-index-url https://test.pypi.org/simple/ -r tests/requirements.txt
      - name: Run test
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        run: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python pytest --tb=short -v tests/ --device ${{ matrix.model }}
