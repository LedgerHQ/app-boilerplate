#ifndef HAVE_SE_TOUCH
/** @page nbgl_app_use_case_nanos Predefined Application Use-cases API

@section nbgl_use_case_intro Introduction
This chapter describes the Application Use-cases API of Advanced BOLOS Graphic Library.

This layer offers a simplified view of some typical use-cases of display in an Application running on Stax.
For example, a use-case can be:

- Reviewing a transaction/message
- Reviewing details on a given data of a transaction/message
- Displaying pages of settings

A full description of each predefined use-case can be found in this document

@section nbgl_use_case_concepts Concepts

This layer uses the Step API described in @ref nbgl_step, but offers to developer more than a single step.

The goal is to simplify the usage of NBGL, but also to offer a better homogeneity across applications, by pushing
developers to use common API for common use-cases.

So that not only the look of the pages but also their transitions look the same. Which should be a real help
for end-users, getting more and more familiar with the user experience of applications.

@subsection nbgl_use_case_example_1 Example 1: transaction review

\image{inline} html UseCase-Nano-Review1.png "caption" width=1000

In this example, a transaction review consists in 5 successive pages, and can be seen as a use-case

@subsection nbgl_use_case_example_2 Example 2: about pages

\image{inline} html UseCase-Nano-About1.png "caption" width=800

In this example, the settings/about (accessed from "Settings"/"About" in Home, single level) consists in 4 pages, and can be seen as another use-case.

@section nbgl_use_cases Use Cases

A few APIs are available to draw typical Use-Cases, such as:

- for Home Screen:
 - @ref nbgl_useCaseHome() to draw the home screen of an application (see @subpage use_case_home)
- for Settings:
 - @ref nbgl_useCaseSettings() to draw a level of settings pages (see @subpage use_case_settings)
- for most used reviews:
 - @ref nbgl_useCaseStaticReview() to draw the pages of a regular review, when all info are available from the beginning (see @subpage use_case_static_review)
 - @ref nbgl_useCaseRegularReview() to draw the pages of a regular review (all pages but the cover one) (see @subpage use_case_regular_review)
- for rare reviews:
 - @ref nbgl_useCaseForwardOnlyReview() to draw the pages of a forward-only review (without back) (see @subpage use_case_forward_only_review)
- for address verification:
 - @ref nbgl_useCaseAddressConfirmation() to draw an address confirmation page (see @subpage use_case_addr_confirm)
 - @ref nbgl_useCaseAddressConfirmationExt() to draw an address confirmation page, with some extra tag/value pairs (see @subpage use_case_addr_confirm_ext)

@subsection use_case_home Home screen Use Case

\image{inline} html UseCase-Nano-Home.png "caption" width=800

Ledger would like all application to have the same home screen, so the @ref nbgl_useCaseHome() function enables to
create such a page, the only configurable parameters being:

- the application name
- the application icon
- the application version
- the tagline, which is the text of the first page (if NULL, it will be the <appName>.")
- the callbacks when touching *quit* or *about* buttons
- the type of *about* button (about or settings)

@code
extern const nbgl_icon_details_t *myAppIcon;

void onAbout(void) {
    // draw settings page here
}
void onQuit(void) {
    // exit app here
}
void appMain(void) {
  nbgl_useCaseHome("MyApp",
                   &myAppIcon,
                   "1.0", // App version
                   NULL,  // no tagline
                   false, // with settings button
                   onAbout,
                   onQuit);
}
@endcode


@subsection use_case_settings Settings Use Case

\image{inline} html UseCase-Nano-About1.png "caption" width=800

Usually settings (or information) of an application consists in a list of pages, each page containing either:

- a static information (version, developer)
- a changeable settings (boolean, list of values)

The API to initiate the display of the series of pages is @ref nbgl_useCaseSettings(), providing:

- the page in which to start
- the number of pages
- a callback called when the "Back" page is double-pressed
- a navigation callback called when left or right buttons are pressed (and also to fill the initial page), to retrieve
the content of the page
- a last callback called when a page is selected (double-pressed)

Here is the source code to display the example of settings:

@code
typedef struct {
    const char  *text;       ///< main text for the switch
    nbgl_state_t initState;  ///< initial state of the switch
} Switch_t;

/**********************
 *  STATIC VARIABLES
 **********************/
static Switch_t switches[] = {
    {
     .initState = false,
     .text      = "Blind signing",
     },
    {
     .initState = true,
     .text      = "Debug",
     },
    {
     .initState = true,
     .text      = "Nonce",
     },
};

static bool navCallback(uint8_t page, nbgl_pageContent_t *content)
{
    if (page < 3) {
        content->text    = switches[page].text;
        content->subText = switches[page].initState ? "Enabled" : "Disabled";
    }
    else {
        return false;
    }
    return true;
}

static void actionCallback(uint8_t page) {
    switches[page].initState = !switches[page].initState;
    nbgl_useCaseSettings(page, 3, app_fullEthereum, navCallback, actionCallback);
}

void myAppSettings(void) {
  // draw the settings Use Case (3 pages), starting at page 0
  nbgl_useCaseSettings(0,             // init page
                       3,             // number of pages
                       appMain,       // "Back" callback
                       navCallback,   // navigation callback, to get content of pages
                       actionCallback // action callback, when a page is selected
                       );
}
@endcode


@subsection use_case_regular_review Regular Review Use Case

\image{inline} html UseCase-Nano-Review1.png "caption" width=1000

Usually transaction/message reviews consist in a sequence of pages, each page containing:

- one tag/value pair page (sometimes with a multi-pages value)
- two selectable pages at the end, to accept or reject the transaction

To navigate between pages, right and left buttons can be pressed. And the last two pages can be selected with a double-press.

The API to initiate the display of the series of pages is @ref nbgl_useCaseRegularReview(), providing:

- the page in which to start (usually 0)
- the number of pages (if unknown, set to 0)
- a navigation callback called when right or left button is pressed, to retrieve
the content of the previous/next page. It is also called to fill the initial page.

Here is the code to display something similar to the example picture:

@code
// 2 pairs of tag/value to display
static nbgl_layoutTagValue_t pairs[2] = {
  {
    .item = "Address",
    .value = "0xEAEAEAEAEAEAEAEAE"
  },
  {
    .item = "Amount",
    .value = "BOL 0.666"
  }
};

static void onApprove(void) {
  // confirm transaction

  // and go back to main
  appMain();
}

static void onReject(void) {
  // reject transaction

  // and go back to main
  appMain();
}

// called to get the content of the given page
static bool navCallback(uint8_t page, nbgl_pageContent_t *content) {
  memset(content, 0, sizeof(nbgl_pageContent_t));
  if (page == 0) {
    // the first page is used to display the title of the review
    content->text = "Review\ntransaction";
    content->icon = &C_icon_eye;
  }
  else if (page < 3) {
    // the 2 next pages contain the two pairs of tag/values
    content->text = pairs[page - 1].item;
    content->subText = pairs[page - 1].value;
  }
  else if (page == 3) {
    // this page is for approval
    content->text =  "Approve";
    content->icon = &C_icon_validate;
    content->callback = onApprove;
  }
  else if (page == 4) {
    // this page is for rejection
    content->text =  "Reject";
    content->icon = &C_icon_crossmark;
    content->callback = onReject;
  }
  else {
    return false;
  }
  // valid page so return true
  return true;
}

void startReview(void) {
  // review on 3 pages, starting at 0
  nbgl_useCaseRegularReview(0, // start at first page
                            5, // number of pages
                            navCallback);
}
@endcode

@subsection use_case_forward_only_review Forward only Review Use Case

Some message/transaction reviews may be too long to be memorized, so it is only possible to move forward.

In this case, no backward navigation is possible, and the number of pages cannot be defined at start-up.

The API to initiate the display of the series of forward-only review pages is @ref nbgl_useCaseForwardOnlyReview(), providing:

- a navigation callback called when to retrieve the content of the next page. It is also called to fill the initial page.

Here is an example code:

@code

static uint8_t last_transaction_page;

static void onApprove(void) {
  // confirm transaction

  // and go back to main
  appMain();
}

static void onReject(void) {
  // reject transaction

  // and go back to main
  appMain();
}

// called to get the content of the given page
static bool navCallback(uint8_t page, nbgl_pageContent_t *content) {
  memset(content, 0, sizeof(nbgl_pageContent_t));
  if (page == 0) {
    // the first page is used to display the title of the review
    content->text = "Review\ntransaction";
    content->icon = &C_icon_eye;
  }
  else if (page == (last_transaction+1)) {
    // try to get a new tag/value pair in this transaction
    char *tag;
    char *value;
    if (getNextTagValuePair(&tag, &value)) {
      content->text = tag;
      content->subText = value;
      last_transaction_page = page;
    }
    else {
      // this page is for approval
      content->text =  "Approve";
      content->icon = &C_icon_validate;
      content->callback = onApprove;
    }
  }
  else if (page == (last_transaction+2)) {
    // this page is for rejection
    content->text =  "Reject";
    content->icon = &C_icon_crossmark;
    content->callback = onReject;
  }
  else {
    return false;
  }
  // valid page so return true
  return true;
}

void startForwardOnlyTransaction(void) {
  last_transaction_page = 0;
  nbgl_useCaseForwardOnlyReview(navCallback);
}
@endcode

@subsection use_case_static_review Static Review Use Case

\image{inline} html UseCase-Nano-Review1.png "caption" width=1000

In some cases, the developer may know all tag/value pairs of a transaction when it is submitted.
And he may want to use a more standardized transaction review Use Case, with less interaction.

In this case, what we call a "static" review can be used. It is similar to a regular review with known number of pages in terms of
presentation and interactions with end-users, but much easier to use for developer.

Indeed, in this case, NBGL automatically computes the number of pages, and the pairs to draw in each page.
In case of a tag/value pair too long to be fully displayed, it is split in a multi-pages steps.

The API to initiate the display of the series of pages is @ref nbgl_useCaseStaticReview(), providing:

- the list of tag/value pairs (or a callback to get them one by one)
- the text to use in first page
- an action callback called when a page's content is selectable (double-pressed)
- a callback called when the "accept" (with param equal to \b true) or "reject" (with param equal to \b false) last two pages is selected

Here is the code to display something similar to example picture:

@code
// 2 pairs of tag/value to display
static nbgl_layoutTagValue_t pairs[2] = {
  {
    .item = "Address",
    .value = "0xEAEAEAEAEAEAEAEAE"
  },
  {
    .item = "Amount",
    .value = "BOL 0.666"
  }
};

static nbgl_layoutTagValueList_t pairList = {
  .nbMaxLinesForValue = 0,
  .nbPairs = 2,
  .pairs = (nbgl_layoutTagValue_t*)pairs
};

// called when "Approve" or "Reject" page is selected (double-press)
static void reviewChoice(bool confirm) {
  if (confirm) {
    // confirm transaction
  }
  else {
    // reject transaction
  }
  // go back to main
  appMain();
}

void startStaticReview(void) {
  // static review, providing the whole list of pairs
  nbgl_useCaseStaticReview(&pairList,
                           &C_icon_eye,
                           "Review\ntransaction",
                           "Approve",
                           "Reject",
                           reviewChoice);
}
@endcode

Here is another version of the example code, using a callback mechanism to get tag/value pairs:

@code
// common tag/value pair to return
static nbgl_layoutTagValue_t pair;

static nbgl_layoutTagValue_t* getPair(uint8_t index);

static nbgl_layoutTagValueList_t pairList = {
  .nbMaxLinesForValue = 0,
  .nbPairs = 5,
  .pairs = NULL, // to indicate that callback should be used
  .callback = getPair,
  .startIndex = 0
};

// called when "Approve" or "Reject" page is selected (double-press)
static void reviewChoice(bool confirm) {
  if (confirm) {
    // confirm transaction
  }
  else {
    // reject transaction
  }
  // go back to main
  appMain();
}

// function called by NBGL to get the pair indexed by "index"
static nbgl_layoutTagValue_t* getPair(uint8_t index) {
  switch (index) {
  case 0:
    pair.item = "To";
    pair.value = "0x123456";
    break;
  case 1:
    pair.item = "From";
    pair.value = "0x654321";
    break;
  case 2:
    pair.item = "Amount";
    pair.value = "1.2345 BTC";
    break;
  case 3:
    pair.item = "Fees";
    pair.value = "0.1 BTC";
    break;
  }
  return &pair;
}

void startStaticReview(void) {
  // static review, providing the description of pairs
  nbgl_useCaseStaticReview(&pairList,
                           &C_icon_eye,
                           "Review\ntransaction",
                           "Approve",
                           "Reject",
                           reviewChoice);
}
@endcode

@subsection use_case_spinner Spinner Use Case

This Use Case is simply to display a static "waiting page"

The @ref nbgl_useCaseSpinner() function enables to create such a page.

@section use_case_refresh_page Refreshing screen

After having drawn graphic objects in **framebuffer**, all functions of this API automatically refresh the screen.
So no need to call @ref nbgl_refresh().

*/
#endif // HAVE_SE_TOUCH
